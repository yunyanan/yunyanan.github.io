<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Blog on Yun YaNan</title>
    <link>https://yunyanan.github.io/blog/</link>
    <description>Recent content in Blog on Yun YaNan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>yunyanan1@gmail.com (Yun YaNan)</managingEditor>
    <webMaster>yunyanan1@gmail.com (Yun YaNan)</webMaster>
    <copyright>Copyright © 2020, Yun YaNan</copyright>
    <lastBuildDate>Sat, 02 May 2020 20:00:53 +0800</lastBuildDate>
    <atom:link href="https://yunyanan.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DeviceTree</title>
      <link>https://yunyanan.github.io/blog/devicetree/</link>
      <pubDate>Sat, 02 May 2020 20:00:53 +0800</pubDate><author>yunyanan1@gmail.com (Yun YaNan)</author>
      <guid>https://yunyanan.github.io/blog/devicetree/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="设备树简介">设备树简介</h2>
<p>设备树概念的引入最早可以追溯到 <strong>Kernel v2.6.22</strong>, 它是用来描述硬件的一种数据结构和语言。 在设备树引入之前， 硬件相关的资源信息都是在驱动中直接写死的， 这种方法的特点就是会有很多的冗余代码， 移植性较差。 当硬件有变动时，需要重新描述新设备的硬件资源， 然后重新编译内核或者驱动。 而引入了设备树之后这些不足之处有了很好的改善， 现在如果要移植驱动的话就只需要修改设备树文件，提供一个新平台的 <strong>dtb</strong> 文件给内核即可。</p>
<p><strong>名词解释</strong>：<br>
<strong>dts  &ndash; Device Tree Source files</strong>　　　　　　// 设备树源文件<br>
<strong>dtsi &ndash; Device Tree Source Include files</strong>　　// 可以被 <strong>dts</strong> 文件包含的设备树源文件， 主要包含一些通用的设备描述<br>
<strong>dtb  &ndash; Device Tree Blob</strong>　　　　　　　　　// 设备树二进制文件， 由 dts 编译后得到<br>
<strong>blob &ndash; Binary Large Object</strong><br>
<strong>dtc  &ndash; Device Tree Compiler</strong>　　　　　　　// 设备树编译器</p>
<h2 id="设备树语法">设备树语法</h2>
<h3 id="devicetree-node-格式">Devicetree node 格式</h3>
<p><strong>Devicetree</strong> 是由一系列的节点和属性组成， 一个节点也可以包含字节点：</p>





<pre tabindex="0"><code class="language-DTS" data-lang="DTS">[label:] node-name[@unit-address] {
	[properties definitions]
	[child nodes]
};</code></pre><ul>
<li><code>[label:]</code>: 标签。 方便别的节点引用， 可以省略。</li>
<li><code>node-name[@unit-address]</code>: 节点名。 同一级别的节点名字不可以相同， 可以通过增
加设备的地址 <code>[@unit-address]</code> 来区分 <code>node-name</code> 相同的节点。</li>
</ul>
<h3 id="property-格式">Property 格式</h3>





<pre tabindex="0"><code class="language-DTS" data-lang="DTS">[label:] property-name = value;	// 格式1： 有取值
[label:] property-name;			// 格式2： 无取值</code></pre><p>使用分号结尾， 和 C 语言语法类似。</p>
<p>Property 的取值有 3 种类型：</p>
<ol>
<li><strong>Arrays of cell</strong>: 一个或多个 32 位数据， 64 位数据使用 2 个 32 位数据来表示。 格式： <code>&lt;...&gt;</code>。</li>
<li><strong>String</strong>: 字符串。 格式： <code>&quot;...&quot;</code>。</li>
<li><strong>Bytestring</strong>: 1 个或多个字节。 格式： <code>[...]</code>。</li>
</ol>
<p>示例：</p>





<pre tabindex="0"><code class="language-DTS" data-lang="DTS">interrupts = &lt;17 0xc&gt;;						// Arrays of cells, 2 个 32 位数。
clock-frequency = &lt;0x00000001 0x00000000&gt;;	// 2 个 32 位数表示一个64位数。

compatible = &#34;simple-bus&#34;;					// String, 有结束符的字符串。

local-mac-address = [00 00 12 34 56 78];	// Bytestring， 每个字节使用 2 个 16 进制数表示。
local-mac-address = [000012345678];			// 字节和字节之间的空格可以省略。

compatible = &#34;ns16550&#34;, &#34;ns8250&#34;;			// 也可以是各种类型的组合， 用逗号隔开。
example = &lt;0xf00f0000 19&gt;, &#34;a strange property format&#34;;</code></pre><p>在 <strong>DTS</strong> 文件中被定义的各个属性的值的意义是完全取决于驱动程序的， 所以尽管可能
会有些看上去很奇怪的赋值方式或者格式， 但是只要符合 <strong>DTS</strong> 文件的语法就没有问题。</p>
<h3 id="一些特殊默认的属性">一些特殊默认的属性</h3>
<h4 id="address-cells"><strong>#address-cells</strong></h4>
<p>在它的子节点的 <strong>reg</strong> 属性中， 使用多少个 <strong>u32</strong> 整数来描述地址。</p>
<h4 id="size-cells"><strong>#size-cells</strong></h4>
<p>在它的子节点的 <strong>reg</strong> 属性中， 使用多少个 <strong>u32</strong> 整数来描述大小。</p>
<p>示例：</p>





<pre tabindex="0"><code class="language-DTS" data-lang="DTS">   #address-cells = &lt;0x1&gt;;
   #size-cells = &lt;0x1&gt;;
   ...
   ocram: sram@900000 {
	   ...
	   reg = &lt;0x00900000 0x20000&gt;;	// address: 0x00900000 size: 0x20000
	   ...
   };</code></pre><h4 id="compatible"><strong>compatible</strong></h4>
<p><strong>compatible</strong> 属性的值是一系列字符串， 它用 <strong>&ldquo;manufacturer,model&rdquo;</strong> 的格式指定
出了具体的设备。 并且具有从左向右由高到低的兼容性优先级（越靠左边兼容性越好）。</p>
<p>示例：</p>





<pre tabindex="0"><code class="language-DTS" data-lang="DTS">compatible = &#34;samsung, smdk2440&#34;;	// 厂商： samsung 型号： smdk2440</code></pre><h4 id="memory"><strong>memory</strong></h4>
<p>用来描述硬件内存布局。</p>
<p>示例：</p>





<pre tabindex="0"><code class="language-DTS" data-lang="DTS">memory@80000000 {
	device_type = &#34;memory&#34;;
	reg = &lt;0x80000000 0x20000000&gt;;	// 起始地址： 0x80000000 大小： 0x20000000
};</code></pre><h4 id="chosen"><strong>chosen</strong></h4>
<p><strong>bootargs</strong> 属性： 内核启动时的 <strong>command line</strong> 参数。<br>
<strong>stdout-path&amp;stdin-path</strong> 属性：指定标准输入输出， 可选。</p>
<p>示例：</p>





<pre tabindex="0"><code class="language-DTS" data-lang="DTS">chosen {
	bootargs = &#34;noinitrd root=/dev/mtdblock4 rw init=/linuxrc console=ttySAC0,115200&#34;;	// 内核启动时传入的参数
	stdout-path = &amp;uart1;	// 使用 uart1 做标准输出
};</code></pre><h4 id="cpus"><strong>cpus</strong></h4>
<p>描述了 <strong>cpu</strong> 相关的信息。下面一般会有一个或多个子节点。</p>
<p>示例：</p>





<pre tabindex="0"><code class="language-DTS" data-lang="DTS">cpus {
	#address-cells = &lt;1&gt;;	// 在子节点中使用 1 个 32 位数描述地址
	#size-cells = &lt;0&gt;;		// 在子节点中使用几个 32 位数描述大小， 固定为 0

	cpu0: cpu@0 {	// cpu0
	compatible = &#34;arm,cortex-a7&#34;;	// 厂商： arm 型号： cortex-a7
	device_type = &#34;cpu&#34;;
	reg = &lt;0&gt;;						// 表明自己是哪一个 cpu
	...
	};
};</code></pre><h3 id="节点的引用">节点的引用</h3>
<h4 id="phandle">phandle</h4>
<p>节点中的 <strong>phandle</strong> 属性， 使用一个唯一的 <strong>id</strong> 来标识一个节点， 在
<strong>property</strong> 可以使用这个 <strong>id</strong> 来引用节点</p>
<p>示例：</p>





<pre tabindex="0"><code class="language-DTS" data-lang="DTS">pic@10000000 {
	phandle = &lt;1&gt;;
	interrupt-controller;
};

another-device-node {
	interrupt-parent = &lt;1&gt;;		// 使用 phandle 的值来引用 **pic@10000000** 节点。
};</code></pre><h4 id="label">label</h4>
<p>定义节点的时候增加标签属性， 使用标签来引用节点。</p>
<p>示例：</p>





<pre tabindex="0"><code class="language-DTS" data-lang="DTS">PIC: pic@10000000 {
	phandle = &lt;1&gt;;
	interrupt-controller;
};

another-device-node {
	interrupt-parent = &lt;&amp;PIC&gt;;		// 使用 **PIC** 这个i标签来引用 **pic@10000000** 节点。
};</code></pre><h2 id="设备树的编译与反编译">设备树的编译与反编译</h2>
<p>设备树的编译器叫做 <strong>DTC</strong>, 它会把设备树源文件 <strong>DTS, DTSI</strong> 编译成 <strong>DTB</strong>，也
可以把 <strong>DTB</strong> 文件反编译成 <strong>DTS</strong> 文件。 当我们在查看设备树文件的时候， 常常会
由于节点信息分散在多个 <strong>DTS</strong> 和 <strong>DTSI</strong> 文件中造成我们查看不方便， 而使用
<strong>DTC</strong> 反编译出来的 <strong>DTS</strong> 文件则是集中了所有的节点信息, 在查看设备树的时候这
会非常有用。 <strong>DTC</strong> 命令的语法是这样的：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">dtc <span class="o">[</span>-I input-format<span class="o">]</span> <span class="o">[</span>-O output-format<span class="o">]</span> <span class="o">[</span>-o output-filename<span class="o">]</span> <span class="o">[</span>-V output_version<span class="o">]</span> input_filename</span></span></code></pre></div><h2 id="在根文件系统中查看设备树">在根文件系统中查看设备树</h2>
<h3 id="sysfirmwarefdt">/sys/firmware/fdt</h3>
<p>原始 <strong>dtb</strong> 文件， 可以使用 <strong>DTC</strong> 反编译它， 也可以用 <code>hexdump</code> 查看：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">hexdump -C /sys/firmware/fdt</span></span></code></pre></div><h3 id="sysfirmwaredevicetree">/sys/firmware/devicetree</h3>
<p>以目录的结构呈现 <strong>DTB</strong> 文件， 根节点对应 <strong>base</strong> 目录， 每一个节点对应一个目
录， 每一个属性对应一个文件。</p>
<h2 id="内核对设备树的处理">内核对设备树的处理</h2>
<p>Linux uses DT data for three major purposes:</p>
<ol>
<li>platform identification,</li>
<li>runtime configuration, and</li>
<li>device population.</li>
</ol>
<p>内核对设备树的处理也可以从这三个角度出发。</p>
<h3 id="platform-identification">platform identification</h3>
<p>关于平台信息其实在上面的介绍中也算是讲到了， 就是 <strong>compatible</strong> 属性。 根节点下
的 <strong>compatible</strong> 属性即指定了当前系统名称。 如果是多个字符串，那么从左到右就代
表了从最兼容到次之。</p>
<h3 id="runtime-configuration">runtime configuration</h3>
<p>内核对运行时配置信息的处理也比较简单， 简单来说就是从 <strong>DTB</strong> 文件中把所需要的信
息提取出来赋值给内核中的变量即可。 主要是处理了:</p>
<ol>
<li><strong>chosen</strong> 节点中的 <strong>bootargs</strong> 属性的值， 赋值给了全局变量
<strong>boot_command_line</strong>。</li>
<li>根节点下的 <strong>#address-cells</strong> 和 <strong>#size-cells</strong> 属性的值， 赋值给了全局变量：
<strong>dt_root_addr_cells</strong> 和 <strong>dt_root_size_cells</strong>。</li>
<li>提取出 <strong>memory</strong> 节点中的 <strong>arg</strong> 属性的值 <strong>base</strong> 和 <strong>size</strong>, 最终调用
<strong>memblock_add(base, size)</strong>。</li>
</ol>
<h3 id="device-population">device population</h3>
<p>设备树文件中的每个节点都会被转换成一个 <strong>device_node</strong> 结构体， <strong>device_node</strong>
结构体中的 <strong>property</strong> 结构体用来描述该节点的属性， 每一个属性对应一个
<strong>property</strong> 结构体。 这些 <strong>device_node</strong> 构成了一棵树， 根节点为 <strong>root_node</strong>。
而这其中一部分的 <strong>device_node</strong> 又会转换成 <strong>platform_device</strong> 结构。 转换的条
件为：</p>
<ul>
<li>根节点下含有 <strong>compatile</strong> 属性的子节点。</li>
<li>如果一个节点的 <strong>compatile</strong> 属性含有这些特殊的值 <strong>(&ldquo;simpli-bus&rdquo;, &ldquo;simple-mfd&rdquo;,
&ldquo;isa&rdquo;, &ldquo;arm, amba-bus&rdquo;)</strong> 之一， 那么它的子节点（需含 <strong>compatile</strong> 属性）也可
以转换为 <strong>platform_device</strong>。 i2c， spi 等总线节点下的子节点， 应该交给对应的
总线驱动程序来处理， 它们不应该被转换为 <strong>platform_device</strong>。</li>
</ul>
<p>最后， <strong>platform_device</strong> 转换完成后就可以和 <strong>platform_driver</strong> 匹配了， 之后
就是驱动程序的处理了。</p>
<h2 id="为什么-pc-上没有设备树">为什么 PC 上没有设备树</h2>
<p>下面这段内容来自
<strong><a href="https://unix.stackexchange.com/a/399621/410471">StackExchange</a></strong>，
我挑选了里面一部分内容并翻译了出来。</p>
<p>外设和主处理器之间是通过总线建立连接的。 有一些总线协议支持枚举， 即主处理器可以
在总线上询问 “有哪些设备连接到了这个总线上？” 这些设备会以一种标准的格式回复一些
关于它们的类型，制造商，型号和配置的信息。 有了这些信息， 操作系统就可以报告可用
设备的列表， 并决定为每个可用设备使用哪个设备驱动程序。 所有现代 PC 总线都支持枚
举， 但是许多的嵌入式系统使用的是不支持枚举的简单总线， 所以这种情况下就必须告诉
操作系统有哪些设备以及如何访问他们。 设备树就是描述这样信息的一个标准格式。</p>
<hr>
<!-- raw HTML omitted -->]]></content:encoded>
    </item>
    <item>
      <title>编译 Linux 内核</title>
      <link>https://yunyanan.github.io/blog/linux_kernel_compile/</link>
      <pubDate>Sat, 29 Feb 2020 17:40:32 +0800</pubDate><author>yunyanan1@gmail.com (Yun YaNan)</author>
      <guid>https://yunyanan.github.io/blog/linux_kernel_compile/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;来看看怎么编译 &lt;code&gt;GNU Linux&lt;/code&gt; 内核吧 :thinking:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<!-- raw HTML omitted -->
<p>来看看怎么编译 <code>GNU Linux</code> 内核吧 :thinking:</p>
<h2 id="前言">前言</h2>
<hr>
<p>说起来接触 Linux 这么长时间以来我编译过工作中供应商提供的 SDK，
<a href="https://github.com/raspberrypi/linux">Raspberry Pi</a>, 还有为了修改 Ubuntu 的一个
驱动编译过和当时 Ubuntu 同样版本的内核， 就是没有单独编译过最新最纯粹的 Linux 内
核。 虽然说都是 Linux 内核的编译，但是前面说的那些要么是内核版本比较老，要么就是
编译动作多多少少被修改过， 编译的时候存在些许差别。所以这次我直接下载了 GItHub上
<a href="https://github.com/torvalds/linux">Linux</a> 仓库的 master 分支来编译。这次就先记
录一下编译 Linux 内核的方法和过程，后面在来写一个 Kbuild 系统的介绍。</p>
<h2 id="编译">编译</h2>
<hr>
<p>先简单说一下下载吧， 我是直接从 GitHub 上 Linux 的仓库直接下载的， 当然也可以去内核
的<a href="https://www.kernel.org">官方网站</a>上下载, 这上面不仅有最新稳定版本的内核，一些
历史版本的内核也可以从这里下载到。 不仅如此， Linux 的内核仓库中其实还包含了大量
的文档， 可以选择自己编译出内核文档，也可以使用
<a href="https://www.kernel.org/doc/html/latest/index.html">在线文档</a>。</p>
<p>NOTE: 在线的文档可能更方便一点， 自己编译的话要在自己电脑上安装一些工具啥的。</p>
<p>现在进入正题:</p>
<h4 id="配置内核">配置内核</h4>
<p>Linux 内核的配置方法有很多， 下面这三种应该是目前使用比较广泛的三种方式：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">make menuconfig		<span class="c1"># Update current config utilising a menu based program</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">make xconfig		<span class="c1"># Update current config utilising a Qt based front-end</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">make gconfig		<span class="c1"># Update current config utilising a GTK+ based front-end</span></span></span></code></pre></div><p>这三个命令在配置时只需要用一个就可以了， 命令后面的注释说明了这三个命令的使用条件。
这里先介绍一下 <code>make help</code> 命令。 这条命令可以查看到内核编译时所有 Make 可用的目标
及介绍， 上面的注释便出自这里。 我之前配置时也只用过第一种方法，这次编译我的电脑也支持
后面两个命令的条件，所以在这里我也展示一下这三种配置方式的界面。</p>
<ul>
<li>首先是 <code>make menuconfig</code> 的配置界面：</li>
</ul>
<p><img alt="make menuconfig" src="/images/posts/linux_kernel_compile/menuconfig.png"></p>
<ul>
<li>然后是 <code>make xconfig</code> 的配置界面：</li>
</ul>
<p><img alt="make xconfig" src="/images/posts/linux_kernel_compile/xconfig.png"></p>
<ul>
<li>最后是 <code>make gconfig</code> 的配置界面：</li>
</ul>
<p><img alt="make gconfig" src="/images/posts/linux_kernel_compile/gconfig.png"></p>
<p>使用哪种方式可以说取决于个人喜好了或者自己电脑所具备的条件了，毕竟他们最终的目的
都是生成名为 <code>.config</code> 的内核配置文件。 在配置具体功能时最多有三种选择：</p>
<ul>
<li>Y &ndash; 将该功能编译进内核</li>
<li>N &ndash; 不要将该功能编译进内核</li>
<li>M &ndash; 将该功能编译成模块</li>
</ul>
<p>基本每个功能配置都会有对应的帮助说明， 非常的人性化。 需要注意的是这个步骤其实并
不是每次都必须的， 比如之前已经配置过了，或者从其他地方拷贝来了可用的配置文件，
这一步是完全可以跳过的。配置完成后就可以开始编译了。</p>
<h4 id="编译内核">编译内核</h4>
<p>开始编译时直接使用 <code>make</code> 命令即可。 当然如果想加快编译的速度， 可以追加 <code>-j</code> 参
数。</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">make -j 4			<span class="c1"># 同时运行 4 个作业，这里取值推荐为 2 倍的 CPU Core 数</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">make -j <span class="k">$(</span>nproc<span class="k">)</span>		<span class="c1"># 可以通过 nproc 命令得到可用处理单元的数量</span></span></span></code></pre></div><h4 id="编译模块">编译模块</h4>
<p>上面配置内核时说到有三种选择，配置时候选择 <code>M</code> 编译为模块的功能特性在这里可以用
下面的命令编译出来：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">make modules</span></span></code></pre></div><p>至此，需要编译的代码都已经编译完成。</p>
<h2 id="结语">结语</h2>
<hr>
<p>Linux 内核的 Makefile 还有很多目标，例如这些：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">make modules_install		<span class="c1"># 安装内核模块</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">make htmldocs			<span class="c1"># 生成 html 格式的内核文档</span></span></span></code></pre></div><p>在这里就不一一介绍了，以后用到再说。我想说的是正是有这么多的编译目标的存在才让现
在 Linux 内核的编译如此的简单且人性化。 而在 Linux 的内核中更是处处充满了令人眼
前一亮的细节，这应该也是 Linux 内核魅力的来源之一吧。以后慢慢去发现它们吧。 ：）</p>
<p><strong>Happy Hacking!</strong></p>]]></content:encoded>
    </item>
    <item>
      <title>聊聊 Emacs</title>
      <link>https://yunyanan.github.io/blog/talk_about_emacs/</link>
      <pubDate>Wed, 05 Feb 2020 09:17:52 +0800</pubDate><author>yunyanan1@gmail.com (Yun YaNan)</author>
      <guid>https://yunyanan.github.io/blog/talk_about_emacs/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;来聊聊 Emacs 吧 :grimacing:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<!-- raw HTML omitted -->
<p>来聊聊 Emacs 吧 :grimacing:</p>
<h2 id="缘起">缘起</h2>
<hr>
<p>我第一次知道 <code>GUN Emacs</code> 这玩意是刚参加工作那会，当时的领导强制要求使用他配置的
<code>Emacs</code> 来写代码。之前 StackOverflow 上一个
<a href="https://stackoverflow.com/questions/11828270/how-do-i-exit-the-vim-editor">How do I exit the Vim editor?</a>
的问题, 成了很多人聊天作梗的内容。 而当我第一次打开 <code>Emacs</code>，看到它真实面目后先是
一脸茫然，继而就想到了要退出它，于是便遇到了和问出上面那个问题的朋友类似的困
境: <strong>How do I exit the Emacs editor？</strong> 也是从这里开始我就走上了一条和 <code>Emacs</code>
斗智斗勇的道路。</p>
<h2 id="一路走来">一路走来</h2>
<hr>
<p><code>Emacs</code> 的入门学习曲线也是出了名的曲折，而我也在第一次的入门过程中被它所击败。然
而在放弃它一段时间后，我又重新开始跟它较量了起来，这次它引起了我的兴趣，并且让我
成功的入了这个坑。刚开始我是在 <code>Windows</code> 系统下使用 <code>Emacs</code>,  尽管后来用的多了，
更熟练了，但还是觉得用起来多多少少有点难受， 不过这也没能阻止我继续对 <code>Emacs</code> 的探
索。直到工作中开始使用起了 <code>Linux</code>， 当我在<code>Linux</code> 中安装完 <code>Emacs</code> 打开后面对
如丝般顺滑的 <code>Emacs</code> 突然有种似花非花的感觉，发现之前在 <code>Windows</code> 下折腾好久才搞
好的功能换在 <code>Linux</code> 下竟然安装完就能用，顿时便觉得之前在 <code>Windows</code> 下折腾
<code>Emacs</code> 真的是在浪费生命。 自此我便放弃了在 <code>Windows</code> 下使用 <code>Emacs</code> 了。</p>
<p>在整个 <code>Emacs</code> 的使用过程中， 我会经常去上网找一些好用的轮子， 或者有什么突发奇
想，使用过程中碰到了一些痛点什么的，也都会去找一些解决方法。 就是在这样的一个过
程中我的配置文件也变得异常的庞大，并且杂乱不堪。 然后很自然的就想到了要去整理一
下自己的配置， 我觉得这可能也是每一个 <code>Emacser</code> 都会面临的问题。 用 <code>Emacs</code> 这么
长时间以来，我整理我自己的配置文件也有好多次了， 也尝试了不同的组织配置文件的方
式。最近我又重新做了一次这个工作，这次是用了一个 <code>org</code> 文件来做主配置文件， 尽可
能的在文件中描述清楚各个包的作用，放在了 Github <a href="https://github.com/yunyanan/.emacs.d">这
里</a>也能有更好的可读性。这次整理只保留了一
些基本的包，所以配置文件暂时也是比较简单的，我是想在使用的过程中去慢慢增加需要的
功能吧，尽可能的让它向着简洁且强大的方向发展。 这里给大家推荐一个 <code>Emacs</code> 的论坛:
<a href="https://emacs-china.org">Emacs China</a>.</p>
<h2 id="一点思考">一点思考</h2>
<hr>
<p>回顾我整个 <code>Emacs</code> 的使用过程，我觉得想要快速的上手一个新的工具，或者是学习一项
新的技术，最快速的方法是实战。当然，了解它的基本知识也是必要的，但是如果为了学习
它而一直处在学习基本理论知识的状态，效果不理想不说还很容易对它失去兴趣和耐心。
在入门的时候都会很艰难，会有种恐惧感，都说恐惧源于未知，确实如此。就是因为我们对新
的技术，新的工具的不了解，所以才会怕它。然而当实战次数多起来后，你对它的了解越来
越多，恐惧感也随之减弱，离入门也就越来越近。所以前期努力克服这种恐惧感才是我们最
先接受的考验，这也成了我们意志强弱的体现。 当入门之后其实日常使用它以及足够了，
对整体有了概念，一般的问题也都能够解决。 但是如果想重度使用， 深度定制， 那就需
要对它进行更深入的研究了， 不光是 <code>Emacs</code>, 其它的技术，工具也都如此， 所以继续努
力吧。</p>
<p><strong>Happy Hacking!</strong></p>]]></content:encoded>
    </item>
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://yunyanan.github.io/blog/markdown-syntax/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate><author>yunyanan1@gmail.com (Yun YaNan)</author>
      <guid>https://yunyanan.github.io/blog/markdown-syntax/</guid>
      <description>&lt;p&gt;For a quick cheatsheet, check out &lt;a href=&#34;https://simplemde.com/markdown-guide&#34;&gt;https://simplemde.com/markdown-guide&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>For a quick cheatsheet, check out <a href="https://simplemde.com/markdown-guide">https://simplemde.com/markdown-guide</a>.</p>
<hr>
<p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.</p>
<h2 id="headings">Headings</h2>
<p>The following HTML <code>&lt;h1&gt;</code>—<code>&lt;h6&gt;</code> elements represent six levels of section headings. <code>&lt;h1&gt;</code> is the highest section level while <code>&lt;h6&gt;</code> is the lowest.</p>
<h1 id="h1">H1</h1>
<h2 id="h2">H2</h2>
<h3 id="h3">H3</h3>
<h4 id="h4">H4</h4>
<h5 id="h5">H5</h5>
<h6 id="h6">H6</h6>
<h2 id="paragraph">Paragraph</h2>
<p>Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.</p>
<p>Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.</p>
<h2 id="blockquotes">Blockquotes</h2>
<p>The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a <code>footer</code> or <code>cite</code> element, and optionally with in-line changes such as annotations and abbreviations.</p>
<h4 id="blockquote-without-attribution">Blockquote without attribution</h4>
<blockquote>
<p>Tiam, ad mint andaepu dandae nostion secatur sequo quae.
<strong>Note</strong> that you can use <em>Markdown syntax</em> within a blockquote.</p>
</blockquote>
<h4 id="blockquote-with-attribution">Blockquote with attribution</h4>
<blockquote>
<p>Don&rsquo;t communicate by sharing memory, share memory by communicating.<!-- raw HTML omitted -->
— <!-- raw HTML omitted -->Rob Pike<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup><!-- raw HTML omitted --></p>
</blockquote>
<h2 id="tables">Tables</h2>
<p>Tables aren&rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Age</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bob</td>
<td>27</td>
</tr>
<tr>
<td>Alice</td>
<td>23</td>
</tr>
</tbody>
</table>
<h4 id="inline-markdown-within-tables">Inline Markdown within tables</h4>
<table>
<thead>
<tr>
<th>Italics</th>
<th>Bold</th>
<th>Code</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>italics</em></td>
<td><strong>bold</strong></td>
<td><code>code</code></td>
</tr>
</tbody>
</table>
<h2 id="code-blocks">Code Blocks</h2>
<h4 id="code-block-with-backticks">Code block with backticks</h4>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="cp">&lt;!doctype html&gt;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Example HTML5 Document<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Test<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span></span></span></code></pre></div><h4 id="code-block-indented-with-four-spaces">Code block indented with four spaces</h4>
<pre><code>&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;title&gt;Example HTML5 Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;p&gt;Test&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h4 id="code-block-with-hugos-internal-highlight-shortcode">Code block with Hugo&rsquo;s internal highlight shortcode</h4>




<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="cp">&lt;!doctype html&gt;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Example HTML5 Document<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Test<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span></span></span></code></pre></div>
<h2 id="list-types">List Types</h2>
<h4 id="ordered-list">Ordered List</h4>
<ol>
<li>First item</li>
<li>Second item</li>
<li>Third item</li>
</ol>
<h4 id="unordered-list">Unordered List</h4>
<ul>
<li>List item</li>
<li>Another item</li>
<li>And another item</li>
</ul>
<h4 id="nested-list">Nested list</h4>
<ul>
<li>Fruit
<ul>
<li>Apple</li>
<li>Orange</li>
<li>Banana</li>
</ul>
</li>
<li>Dairy
<ul>
<li>Milk</li>
<li>Cheese</li>
</ul>
</li>
</ul>
<h2 id="other-elements--abbr-sub-sup-kbd-mark">Other Elements — abbr, sub, sup, kbd, mark</h2>
<p><!-- raw HTML omitted -->GIF<!-- raw HTML omitted --> is a bitmap image format.</p>
<p>H<!-- raw HTML omitted -->2<!-- raw HTML omitted -->O</p>
<p>X<!-- raw HTML omitted -->n<!-- raw HTML omitted --> + Y<!-- raw HTML omitted -->n<!-- raw HTML omitted --> = Z<!-- raw HTML omitted -->n<!-- raw HTML omitted --></p>
<p>Press <!-- raw HTML omitted --><!-- raw HTML omitted -->CTRL<!-- raw HTML omitted -->+<!-- raw HTML omitted -->ALT<!-- raw HTML omitted -->+<!-- raw HTML omitted -->Delete<!-- raw HTML omitted --><!-- raw HTML omitted --> to end the session.</p>
<p>Most <!-- raw HTML omitted -->salamanders<!-- raw HTML omitted --> are nocturnal, and hunt for insects, worms, and other small creatures.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The above quote is excerpted from Rob Pike&rsquo;s <a href="https://www.youtube.com/watch?v=PAAkCSZUG1c">talk</a> during Gopherfest, November 18, 2015.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded>
    </item>
  </channel>
</rss>
